{"version":3,"sources":["../../../../src/app/form/form.component.ts"],"names":[],"mappings":"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","file":"form.component.js","sourceRoot":"","sourcesContent":["import { OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n// @Component({\n//   selector: 'opt-form',\n//   templateUrl: './form.component.html'\n// })\nexport abstract class OptFormComponent implements OnInit {\n  form: FormGroup;\n  submitted = false;\n\n  serverMessage: ServerMessage = {\n    message: 'Server message',\n    show: false,\n    isStatusOk: true\n  };\n\n  protected SERVER_MESSAGES: any = {\n    401: 'Unauthorized message',\n    403: 'Forbidden message',\n    500: 'Server error',\n    '*': 'Default error'\n  };\n\n  /**\n   *\n   * @example {\n   *   field1: '',\n   *   field2: ''\n   * }\n   */\n  formErrors: any = {};\n\n  /**\n   * @example {\n   *   field1: {\n   *     'required': 'Field 1 is required',\n   *     'email': 'Invalid email'\n   *   },\n   *   field2: {\n   *     'required': 'Field 2 is required',\n   *     'minlength': 'Field 2 must be at least 8 characters long'\n   *   }\n   * }\n   */\n  VALIDATION_MESSAGES: any = {};\n\n  /**\n   * @example {\n   *   field1: 'Field 1',\n   *   field2: 'Field 2'\n   * }\n   */\n  PLACEHOLDERS: any = {};\n\n  SUBMIT_LABEL = 'Submit label';\n\n  // attribute for first param function of the https://angular.io/api/forms/FormBuilder#group\n  formBuilderGroupControlsConfig: any = {\n    field1: [\n      null, [Validators.required, Validators.email]\n    ],\n    field2: [\n      null, [Validators.required, Validators.minLength(8)]\n    ]\n  };\n\n  // attribute for seconds param function of the https://angular.io/api/forms/FormBuilder#group\n  formBuilderGroupExtra?: any;\n\n  abstract submit(): void;\n\n  constructor(protected formBuilder: FormBuilder) {\n  }\n\n  ngOnInit(): void {\n    this.buildForm();\n  }\n\n  isFromValid(): boolean {\n    return this.form.valid;\n  }\n\n  setServerMessage(statusCode: any, isSuccessMessage: boolean = false) {\n    this.serverMessage.message = this.SERVER_MESSAGES[statusCode];\n    if (!this.serverMessage.message) {\n      this.serverMessage.message = this.SERVER_MESSAGES['*'];\n    }\n    this.serverMessage.show = true;\n    this.serverMessage.isStatusOk = isSuccessMessage;\n  }\n\n  onSubmit() {\n    const self = this;\n    self.submitted = true;\n    self.onValueChanged();\n\n    if (self.isFromValid()) {\n      this.submit();\n    }\n  }\n\n  buildForm(): void {\n    // Build login form\n    this.form = this.formBuilder.group(this.formBuilderGroupControlsConfig, this.formBuilderGroupExtra);\n    this.form.valueChanges\n      .subscribe(data => this.onValueChanged(data));\n    this.onValueChanged();\n  }\n\n  onValueChanged(data?: any) {\n    if (!this.form) {\n      return;\n    }\n    const form = this.form;\n\n    for (const field in this.formErrors) {\n      if (!this.formErrors.hasOwnProperty(field)) {\n        continue;\n      }\n      // clear previous error message (if any)\n      this.formErrors[field] = '';\n      const control: any = form.get(field);\n\n      if ((control && control.dirty && !control.valid) || (control && this.submitted)) {\n        if (!control.errors) {\n          continue;\n        }\n        const messages = this.VALIDATION_MESSAGES[field];\n        for (const key in control.errors) {\n          if (!control.errors.hasOwnProperty(key)) {\n            continue;\n          }\n          if (this.formErrors[field] === '') {\n            this.formErrors[field] = messages[key];\n          }\n        }\n      }\n    }\n  }\n}\n\nexport interface ServerMessage {\n  message: string;\n  show: boolean;\n  isStatusOk: boolean;\n}\n"]}