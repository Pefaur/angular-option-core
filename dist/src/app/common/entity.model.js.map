{"version":3,"sources":["../../../../src/app/common/entity.model.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH;IAGE,mBAAY,UAAmB;QAC7B,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAC1B,CAAC;IAYD;;OAEG;IACI,kCAAc,GAArB;QACE,IAAM,WAAW,GAAG,EAAE,CAAC;QACvB,IAAM,IAAI,GAAG,IAAI,CAAC;QAClB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAS,GAAQ;YACrC,IAAM,SAAS,GAAS,IAAK,CAAC,GAAG,CAAC,CAAC;YACnC,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC;gBACjB,EAAE,CAAC,CAAC,SAAS,YAAY,SAAS,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC7C,WAAY,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,EAAE,CAAC;gBACzC,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBACpC,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBACnB,WAAY,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;wBAC7B,SAAS,CAAC,GAAG,CAAC,UAAS,YAAuB;4BACtC,WAAY,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC,CAAC;wBAC9D,CAAC,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACA,WAAY,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;gBACtC,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IAED;;OAEG;IACI,0BAAM,GAAb;QACE,IAAM,IAAI,GAAG,EAAE,CAAC;QACV,IAAK,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC9D,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACH,gBAAC;AAAD,CAtDA,AAsDC,IAAA","file":"entity.model.js","sourceRoot":"","sourcesContent":["/**\n * @author Daniel Caris Zapata <dcaris@optionti.com>\n * Parent abstract class for models\n */\nexport abstract class OptEntity {\n  id: number;\n\n  constructor(jsonObject?: object) {\n    if (!jsonObject) {\n      return;\n    }\n    this.decode(jsonObject);\n  }\n\n  /**\n   * get entity name for form key\n   */\n  abstract getFormEntityName(): string;\n\n  /**\n   * Decode json to class attributes\n   */\n  protected abstract decode(jsonObject: object): void;\n\n  /**\n   * Get form object of the entity\n   */\n  public getFormContent(): object {\n    const formContent = {};\n    const self = this;\n    Object.keys(this).map(function(key: any) {\n      const attribute = (<any>self)[key];\n      if (key !== 'id') {\n        if (attribute instanceof OptEntity && attribute.id) {\n          (<any>formContent)[key] = attribute.id;\n        } else if (Array.isArray(attribute)) {\n          if (attribute.length > 0) {\n            (<any>formContent)[key] = [];\n            attribute.map(function(subAttribute: OptEntity) {\n              (<any>formContent)[key].push(subAttribute.getFormContent());\n            });\n          }\n        } else {\n          (<any>formContent)[key] = attribute;\n        }\n      }\n    });\n    return formContent;\n  }\n\n  /**\n   * Parse instance object data to json object for api rest\n   */\n  public toForm(): object {\n    const form = {};\n    (<any>form)[this.getFormEntityName()] = this.getFormContent();\n    return form;\n  }\n}\n"]}