{"version":3,"sources":["../../../../src/app/common/auth-guard.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EACQ,MAAA,EAId,MAAM,iBAAA,CAAkB;AACzB,OAAO,EAAE,cAAA,EAAe,MAAO,gBAAA,CAAiB;AAQhD;IAGE,sBAAoB,WAA2B,EAAU,MAAc;QAAnD,gBAAW,GAAX,WAAW,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAQ;QAFvE,eAAU,GAAG,QAAQ,CAAC;IAGtB,CAAC;IAED,kCAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QACnE,IAAM,GAAG,GAAW,KAAK,CAAC,GAAG,CAAC;QAE9B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED,uCAAgB,GAAhB,UAAiB,KAA6B,EAAE,KAA0B;QACxE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;IAED,oCAAa,GAAb,UAAc,SAAiC,EAAE,YAAoC,EAAE,YAAiC;QACtH,IAAM,GAAG,GAAG,YAAY,CAAC,GAAG,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,iCAAU,GAAV,UAAW,GAAW;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,0CAA0C;QAC1C,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,GAAG,CAAC;QAEnC,yCAAyC;QACzC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,kCAAW,GAAX,UAAY,GAAW;QACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,4BAA4B;QAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IASH,mBAAC;AAAD,CAnDA,AAmDC;;AARM,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,2BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,cAAc,GAAG;IACxB,EAAC,IAAI,EAAE,MAAM,GAAG;CACf,EAH6F,CAG7F,CAAC","file":"auth-guard.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  CanActivate, Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  CanActivateChild\n} from '@angular/router';\nimport { OptAuthService } from './auth.service';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface CanComponentDeactivate {\n  canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\n}\n\n\nexport class OptAuthGuard implements CanActivate, CanActivateChild {\n  loginRoute = '/login';\n\n  constructor(private authService: OptAuthService, private router: Router) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    const url: string = state.url;\n\n    return this.checkLogin(url);\n  }\n\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    return this.canActivate(route, state);\n  }\n\n  canDeactivate(component: CanComponentDeactivate, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot) {\n    const url = currentState.url;\n    return this.checkLogout(url);\n  }\n\n  checkLogin(url: string): boolean {\n    if (this.authService.isLoggedIn()) {\n      return true;\n    }\n\n    // Store the attempted URL for redirecting\n    this.authService.redirectUrl = url;\n\n    // Navigate to the login page with extras\n    this.router.navigate([this.loginRoute]);\n    return false;\n  }\n\n  checkLogout(url: string): boolean {\n    if (!this.authService.isLoggedIn()) {\n      return true;\n    }\n\n    // Navigate to the home page\n    this.router.navigate(['']);\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OptAuthService, },\n{type: Router, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}