{"version":3,"sources":["../../../../src/app/shared/auth.service.ts"],"names":[],"mappings":"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","file":"auth.service.js","sourceRoot":"","sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { Headers, Http } from '@angular/http';\n\nimport { OptUser } from '../user/user.model';\nimport { OptResponse } from './response';\nimport { MODULE_CONFIG, OptionCoreConfig } from '../option-core.config';\n\nimport 'rxjs/add/observable/of';\nimport { Observable } from 'rxjs/Observable';\n\n\nexport class OptAuthService {\n  protected headers = new Headers({'Content-Type': 'application/json'});\n  public redirectUrl: string;\n  protected baseUrl: string;\n\n  constructor( protected config: OptionCoreConfig, protected http: Http) {\n    this.baseUrl = config.apiUrl;\n  }\n\n  register(user: OptUser): Observable<OptResponse> {\n    return this.http\n      .post(this.baseUrl + '/register', JSON.stringify(user.toRegisterForm()), {headers: this.headers})\n      .map(response => {\n        return OptResponse.fromJSON(response);\n      })\n      .catch(this.handleError);\n  }\n\n  login(email: string, password: String): Observable<OptResponse> {\n    const credentials = {\n      'credentials': {\n        'username': email,\n        'password': password\n      }\n    };\n\n    return this.http\n      .post(this.baseUrl + '/login', JSON.stringify(credentials), {headers: this.headers})\n      .map(response => {\n        this.setToken(response.json().authorization.simpleToken);\n        return OptResponse.fromJSON(response);\n      })\n      .catch(this.handleError);\n  }\n\n  logout(): Observable<OptResponse> {\n    this.clearSession();\n    const response = new OptResponse();\n    response.isStatusOk = true;\n    response.statusCode = 200;\n    return Observable.of(response);\n  }\n\n  recoverPassword(email: string): Observable<OptResponse> {\n    // reset/send-email\n    // {username: dcaris@optionti.com}\n    const body = {username: email};\n    return this.http\n      .post(this.baseUrl + '/reset/send-email', JSON.stringify(body), {headers: this.headers})\n      .map(function (response: any) {\n        return OptResponse.fromJSON(response);\n      })\n      .catch(this.handleError);\n  }\n\n  resetPassword(token: string, password: string, passwordConfirmation: string): Observable<OptResponse> {\n    const body = {\n      password: password,\n      passwordConfirmation: passwordConfirmation\n    };\n    return this.http\n      .post(this.baseUrl + '/reset-password/' + token, JSON.stringify(body), {headers: this.headers})\n      .map(function (response: any) {\n        return OptResponse.fromJSON(response);\n      })\n      .catch(this.handleError);\n  }\n\n  isLoggedIn(): boolean {\n    return !!this.getToken();\n  }\n\n  clearSession(): void {\n    this.removeToken();\n  }\n\n  removeToken() {\n    localStorage.removeItem('authorization_token');\n  }\n\n  setToken(token: string) {\n    localStorage.setItem('authorization_token', token);\n  }\n\n  getToken(): string {\n    return (<any>localStorage).getItem('authorization_token');\n  };\n\n  protected handleError(error: Response): Observable<any> {\n    console.error('An error occurred', error);\n    return Observable.throw(OptResponse.fromJSON(error));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [MODULE_CONFIG, ] }, ]},\n{type: Http, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}