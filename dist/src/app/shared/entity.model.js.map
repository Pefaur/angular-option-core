{"version":3,"sources":["../../../../src/app/shared/entity.model.ts"],"names":[],"mappings":"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","file":"entity.model.js","sourceRoot":"","sourcesContent":["/**\n * @author Daniel Caris Zapata <dcaris@optionti.com>\n * Parent abstract class for models\n */\nimport { isUndefined } from 'util';\nimport * as moment from 'moment';\n\nexport abstract class OptEntity {\n  id: number;\n\n  constructor(jsonObject?: object) {\n    if (!jsonObject) {\n      return;\n    }\n    this.decode(jsonObject);\n  }\n\n  /**\n   * get entity name for form key\n   */\n  abstract getFormEntityName(): string;\n\n  /**\n   * Decode json to class attributes\n   */\n  protected abstract decode(jsonObject: object): void;\n\n  /**\n   * Use for generate form attribute from key instance attribute\n   */\n  getFormContentAttribute(key: any, attribute: any) {\n    let formAttribute: any;\n    if (key !== 'id' && !isUndefined(attribute)) {\n      let attributeId = attribute && attribute.id ? attribute.id : null;\n      attributeId = !attributeId && (attribute && attribute._id) ? attribute._id : attributeId;\n      if (attribute instanceof OptEntity && attributeId) {\n        formAttribute = attributeId;\n      } else if (moment.isMoment(attribute)) {\n        formAttribute = attribute.format();\n      } else if (Array.isArray(attribute)) {\n        if (attribute.length > 0) {\n          formAttribute = [];\n          Object.keys(attribute).map(subAttributeKey => {\n            const formContentAttribute = this.getFormContentAttribute(subAttributeKey, (<any>attribute)[subAttributeKey]);\n            if (!isUndefined(formContentAttribute)) {\n              formAttribute.push(formContentAttribute);\n            }\n          });\n        }\n      } else {\n        formAttribute = attribute;\n      }\n    }\n    return formAttribute;\n  }\n\n  /**\n   * Get form object of the entity\n   */\n  public getFormContent(): object {\n    const formContent = {};\n    const self = this;\n\n    Object.keys(this).map((key: any) => {\n      const attribute = (<any>self)[key];\n      // remove underscore on private attributes\n      key = key.replace(/^[_]/g, '');\n      const formContentAttribute = self.getFormContentAttribute(key, attribute);\n      if (!isUndefined(formContentAttribute)) {\n        (<any>formContent)[key] = formContentAttribute;\n      }\n    });\n    return formContent;\n  }\n\n  /**\n   * Parse instance object data to json object for api rest\n   */\n  public toForm(): object {\n    const form = {};\n    (<any>form)[this.getFormEntityName()] = this.getFormContent();\n    return form;\n  }\n}\n"]}