{"version":3,"sources":["../../../../src/app/fake-backend/auth-mock.ts"],"names":[],"mappings":"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","file":"auth-mock.js","sourceRoot":"","sourcesContent":["import { RequestMethod } from '@angular/http';\nimport { Mock } from './mock';\n\nexport class AuthMock extends Mock {\n  users: any[] = AuthMock.getUsers();\n\n  static getUsers(): any[] {\n    const localStorageUsers = localStorage.getItem('users');\n    let users = localStorageUsers ? JSON.parse(localStorageUsers) : [];\n    if (users.length === 0) {\n      const avatar = 'http://via.placeholder.com/160x160/F1F1F2';\n      users = [{\n        'id': 1,\n        'authorizationSimpleToken': '1',\n        'firstName': 'Francisco',\n        'lastName': 'Rodríguez',\n        'secondLastName': 'Fernández',\n        'phone': '+56293214008',\n        'cellPhone': '+56993214008',\n        'email': 'frodriguez@option.cl',\n        'bornDate': null,\n        'sex': null,\n        'healthCare': null,\n        'password': 'a12345678',\n        'avatar': avatar\n      }];\n      localStorage.setItem('users', JSON.stringify(users));\n    }\n    return users;\n  }\n\n  static getUserByAuthorizationSimpleToken(token: string): object {\n    const filteredUsers = AuthMock.getUsers().filter(user => {\n      return user.authorizationSimpleToken === token;\n    });\n    return filteredUsers[0];\n  }\n\n  requests(): boolean {\n    // array in local storage for registered users\n    const localStorageUsers = localStorage.getItem('users');\n    const users = localStorageUsers ? JSON.parse(localStorageUsers) : [];\n\n    // authenticate\n    if (this.connection.request.url.endsWith('/login') && this.connection.request.method === RequestMethod.Post) {\n      // get parameters from post request\n      const params = JSON.parse(this.connection.request.getBody());\n      const credentials = params.credentials;\n\n      const authorizationBody = this.login(credentials.username, credentials.password);\n      if (authorizationBody) {\n        this.mockRespond({\n          status: 200,\n          body: authorizationBody\n        });\n      } else {\n        // // else return 400 bad request\n        this.mockError({\n          status: 401,\n          statusText: 'Username or password is incorrect'\n        });\n      }\n\n      return true;\n    }\n\n    if (this.connection.request.url.endsWith('/register') && this.connection.request.method === RequestMethod.Post) {\n      // get object from post body\n      const requestBody = JSON.parse(this.connection.request.getBody());\n      // get form data\n      const newUser = requestBody[Object.keys(requestBody)[0]];\n\n      // validation\n      const duplicateUser = users.filter((user: any) => {\n        return user.email === newUser.email;\n      }).length;\n      if (duplicateUser) {\n        this.mockError({\n          status: 400,\n          statusText: 'Username ' + newUser.username + ' is already taken'\n        });\n        return true;\n      }\n\n      // save new user\n      newUser.id = users.length + 1;\n      const body = this.createAuthorizationBody(newUser);\n      newUser.authorizationSimpleToken = body.authorization.simpleToken;\n      users.push(newUser);\n      localStorage.setItem('users', JSON.stringify(users));\n\n      // respond 200 OK\n      this.mockRespond({status: 200, body: body});\n\n      return true;\n    }\n\n    if (this.connection.request.url.endsWith('/reset/send-email') && this.connection.request.method === RequestMethod.Post) {\n      // get object from post body\n      const requestBody = JSON.parse(this.connection.request.getBody());\n\n      // respond 200 OK\n      this.mockRespond({status: 200, body: {}});\n\n      return true;\n    }\n\n    const getOneRegex = new RegExp('reset-password/' + '.*$');\n    if (this.connection.request.url.match(getOneRegex) && this.connection.request.method === RequestMethod.Post) {\n      // get object from post body\n      const requestBody = JSON.parse(this.connection.request.getBody());\n\n      // respond 200 OK\n      this.mockRespond({status: 200, body: {}});\n\n      return true;\n    }\n\n    return false;\n  }\n\n  login(username: string, password: string): object | undefined {\n    // find if any user matches login credentials\n    const filteredUsers = this.users.filter(user => {\n      return user.username === username && user.password === password;\n    });\n    if (filteredUsers.length) {\n      // if login details are valid return 200 OK with user details and fake jwt token\n      const user = filteredUsers[0];\n      return this.createAuthorizationBody(user);\n    }\n  }\n\n  createAuthorizationBody(user: any): any {\n    const simpleToken = user.id + '';\n    return {\n      authorization: {\n        simpleToken: simpleToken\n      }\n    };\n  }\n}\n"]}