{"version":3,"sources":["../../../../src/app/fake-backend/fake-backend.factory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAA4C,cAAc,EAAE,MAAM,eAAe,CAAC;AAE/F,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAEvC,MAAM,6BAA6B,OAAoB,EAAE,OAA2B,EAAE,WAAuB;IAE3G,yBAAyB;IACzB,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,UAAC,UAA0B;QACvD,8CAA8C;QAC9C,UAAU,CAAC;YAET,IAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC1C,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC;YACT,CAAC;YAED,IAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC1C,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC;YACT,CAAC;YAED,8CAA8C;YAC9C,IAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAChD,IAAM,cAAc,GAAG,IAAI,cAAc,CAAC;gBACxC,MAAM,EAAE,UAAU,CAAC,OAAO,CAAC,MAAM;gBACjC,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC,OAAO;gBACnC,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE;gBAClC,GAAG,EAAE,UAAU,CAAC,OAAO,CAAC,GAAG;gBAC3B,eAAe,EAAE,UAAU,CAAC,OAAO,CAAC,eAAe;gBACnD,YAAY,EAAE,UAAU,CAAC,OAAO,CAAC,YAAY;aAC9C,CAAC,CAAC;YACH,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC;iBACrD,SAAS,CAAC,UAAC,QAAkB;gBAC1B,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YACnC,CAAC,EACD,UAAC,KAAU;gBACT,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;QACT,CAAC,EAAE,GAAG,CAAC,CAAC;IACV,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AACpC,CAAC","file":"fake-backend.factory.js","sourceRoot":"","sourcesContent":["import { Http, BaseRequestOptions, Response, XHRBackend, RequestOptions } from '@angular/http';\nimport { MockBackend, MockConnection } from '@angular/http/testing';\nimport { AuthMock } from './auth-mock';\nimport { UserMock } from './user-mock';\n\nexport function fakeBackendFactory(backend: MockBackend, options: BaseRequestOptions, realBackend: XHRBackend) {\n\n  // configure fake backend\n  backend.connections.subscribe((connection: MockConnection) => {\n    // wrap in timeout to simulate server api call\n    setTimeout(() => {\n\n      const authMock = new AuthMock(connection);\n      if (authMock.requests()) {\n        return;\n      }\n\n      const userMock = new UserMock(connection);\n      if (userMock.requests()) {\n        return;\n      }\n\n      // pass through any requests not handled above\n      const realHttp = new Http(realBackend, options);\n      const requestOptions = new RequestOptions({\n        method: connection.request.method,\n        headers: connection.request.headers,\n        body: connection.request.getBody(),\n        url: connection.request.url,\n        withCredentials: connection.request.withCredentials,\n        responseType: connection.request.responseType\n      });\n      realHttp.request(connection.request.url, requestOptions)\n        .subscribe((response: Response) => {\n            connection.mockRespond(response);\n          },\n          (error: any) => {\n            connection.mockError(error);\n          });\n    }, 500);\n  });\n\n  return new Http(backend, options);\n}\n"]}