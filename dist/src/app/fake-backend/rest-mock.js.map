{"version":3,"sources":["../../../../src/app/fake-backend/rest-mock.ts"],"names":[],"mappings":"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","file":"rest-mock.js","sourceRoot":"","sourcesContent":["import { RequestMethod } from '@angular/http';\nimport { Mock } from './mock';\nimport { AuthMock } from './auth-mock';\n\nexport abstract class RestMock extends Mock {\n  // array in local storage for registered resources\n  localStorageResources = localStorage.getItem(this.getLocalStorageKey());\n  resources: any[] = this.localStorageResources ? JSON.parse(this.localStorageResources) : [];\n\n  abstract getResourceEndpoint(): string;\n\n  abstract getLocalStorageKey(): string;\n\n  abstract getResourceName(): string;\n\n  hasSecurityMock(): boolean {\n    return true;\n  }\n\n  generateBody(result: object[] | object): object {\n    const body: any = {\n      filterBy: [],\n      limit: 20,\n      offset: 0,\n      orderBy: [],\n      pretty: false,\n      resultDescription: this.getResourceName(),\n      select: [],\n      result: result\n    };\n    if (Array.isArray(result)) {\n      body.total = result.length || 1;\n    }\n    return body;\n  }\n\n  isAuthorizedUser(): boolean {\n    const authorizationSimpleToken = this.connection.request.headers.get('Authorization') || '';\n    return !!AuthMock.getUserByAuthorizationSimpleToken(authorizationSimpleToken);\n  }\n\n  requests(): boolean {\n    // get all resources\n    if (this.connection.request.url.endsWith(this.getResourceEndpoint()) && this.connection.request.method === RequestMethod.Get) {\n      // check for fake auth token in header and return resources if valid, this security is implemented server side in a real application\n      if (!this.hasSecurityMock() || this.isAuthorizedUser()) {\n        // respond 200 OK with resources\n        this.mockRespond({status: 200, body: this.generateBody(this.resources)});\n      } else {\n        // return 401 not authorised if token is null or invalid\n        this.mockError({\n          status: 400,\n          statusText: 'not authorized'\n        });\n      }\n\n      return true;\n    }\n\n    // get resources by id\n    const getOneRegex = new RegExp(this.getResourceEndpoint() + '/' + '\\\\d+$');\n    if (this.connection.request.url.match(getOneRegex) && this.connection.request.method === RequestMethod.Get) {\n      // check for fake auth token in header and return resource if valid, this security is implemented server side in a real application\n      if (!this.hasSecurityMock() || this.isAuthorizedUser()) {\n        // find resource by id in resources array\n        const urlParts = this.connection.request.url.split('/');\n        const id = Number.parseInt(urlParts[urlParts.length - 1]);\n        const matchedResources = this.resources.filter(resource => {\n          return resource.id === id;\n        });\n        const resource = matchedResources.length ? matchedResources[0] : null;\n\n        // respond 200 OK with resource\n        this.mockRespond({status: 200, body: this.generateBody(resource)});\n      } else {\n        // return 401 not authorised if token is null or invalid\n        this.mockError({\n          status: 400,\n          statusText: 'not authorized'\n        });\n      }\n\n      return true;\n    }\n\n    // create resource\n    if (this.connection.request.url.endsWith(this.getResourceEndpoint()) && this.connection.request.method === RequestMethod.Post) {\n      // get object from post body\n      const requestBody = JSON.parse(this.connection.request.getBody());\n      // get form data\n      const newResource = requestBody[Object.keys(requestBody)[0]];\n      if (!this.hasSecurityMock() || this.isAuthorizedUser()) {\n        // validation\n        // const duplicateResource = resources.filter(resource => {\n        //   return resource.username === newResource.username;\n        // }).length;\n        //\n        // if (duplicateResource) {\n        //   this.connection.mockError(new Error('Resourcename ' + newResource.username + ' is already taken'));\n        //   return true;\n        // }\n\n        // save new resource\n        newResource.id = this.resources.length + 1;\n        this.resources.push(newResource);\n        localStorage.setItem(this.getLocalStorageKey(), JSON.stringify(this.resources));\n\n        // respond 200 OK\n        this.mockRespond({status: 200});\n      } else {\n        // return 401 not authorised if token is null or invalid\n        this.mockError({\n          status: 400,\n          statusText: 'not authorized'\n        });\n      }\n      return true;\n    }\n\n    // get resources by id\n    const updateRegex = new RegExp(this.getResourceEndpoint() + '/' + '\\\\d+$');\n    if (this.connection.request.url.match(updateRegex) && this.connection.request.method === RequestMethod.Patch) {\n      // get object from patch body\n      const requestBody = JSON.parse(this.connection.request.getBody());\n      // get form data\n      const updateResource = requestBody[Object.keys(requestBody)[0]];\n\n      // check for fake auth token in header and return resource if valid, this security is implemented server side in a real application\n      if (!this.hasSecurityMock() || this.isAuthorizedUser()) {\n        // find resource by id in resources array\n        const urlParts = this.connection.request.url.split('/');\n        const id = Number.parseInt(urlParts[urlParts.length - 1]);\n\n        let index;\n        for (index = 0; index < this.resources.length; index++) {\n          const resource = this.resources[index];\n          if (resource.id === id) {\n            break;\n          }\n        }\n        if (this.resources[index]) {\n          this.resources[index] = Object.assign(this.resources[index], updateResource);\n          localStorage.setItem(this.getLocalStorageKey(), JSON.stringify(this.resources));\n          // respond 200 OK with resource\n          this.mockRespond({status: 200});\n        } else {\n          // return 404 not found resource\n          this.mockError({\n            status: 404,\n            statusText: 'not found'\n          });\n        }\n      } else {\n        // return 401 not authorised if token is null or invalid\n        this.mockError({\n          status: 400,\n          statusText: 'not authorized'\n        });\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n}\n"]}