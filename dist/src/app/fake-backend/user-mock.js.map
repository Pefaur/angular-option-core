{"version":3,"sources":["../../../../src/app/fake-backend/user-mock.ts"],"names":[],"mappings":"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","file":"user-mock.js","sourceRoot":"","sourcesContent":["import { RequestMethod } from '@angular/http';\nimport { RestMock } from './rest-mock';\nimport { AuthMock } from './auth-mock';\n\nexport class UserMock extends RestMock {\n\n  getResourceEndpoint(): string {\n    return '/users';\n  }\n\n  getLocalStorageKey(): string {\n    return 'users';\n  }\n\n  getResourceName(): string {\n    return 'users';\n  }\n\n  requests(): boolean {\n    const requestUrl = this.connection.request.url;\n    const requestMethod = this.connection.request.method;\n\n    const meRequest = this.getResourceEndpoint() + '/me';\n    if (requestUrl.endsWith(meRequest) && requestMethod === RequestMethod.Get) {\n      // check for fake auth token in header and return resources if valid, this security is implemented server side in a real application\n      if (this.isAuthorizedUser()) {\n        const authorizationSimpleToken = this.connection.request.headers.get('Authorization') || '';\n        const currentUser = AuthMock.getUserByAuthorizationSimpleToken(authorizationSimpleToken);\n        const body = this.generateBody(currentUser);\n\n        // respond 200 OK with resources\n        this.mockRespond({status: 200, body: body});\n      } else {\n        // return 401 not authorised if token is null or invalid\n        this.mockError({status: 401});\n      }\n      return true;\n    }\n\n    const changePasswordRequest = this.getResourceEndpoint() + '/me/password';\n    if (requestUrl.endsWith(changePasswordRequest) && requestMethod === RequestMethod.Post) {\n      // check for fake auth token in header and return resources if valid, this security is implemented server side in a real application\n      if (this.isAuthorizedUser()) {\n        // get object from post body\n        const requestBody = JSON.parse(this.connection.request.getBody());\n        const authorizationSimpleToken = this.connection.request.headers.get('Authorization') || '';\n        const currentUser: any = AuthMock.getUserByAuthorizationSimpleToken(authorizationSimpleToken);\n        if (currentUser.password === requestBody.oldPassword) {\n          let index;\n          for (index = 0; index < this.resources.length; index++) {\n            const resource = this.resources[index];\n            if (resource.id === currentUser.id) {\n              break;\n            }\n          }\n          // change password\n          currentUser.password = requestBody.password;\n          this.resources[index] = Object.assign(this.resources[index], currentUser);\n          // update user on local storage\n          localStorage.setItem(this.getLocalStorageKey(), JSON.stringify(this.resources));\n\n          // respond 200 OK with resource\n          this.mockRespond({status: 200});\n        } else {\n          // return 400 bad request, the password is incorrect\n          this.mockError({status: 400, message: 'incorrect password'});\n        }\n      } else {\n        // return 401 not authorised if token is null or invalid\n        this.mockError({status: 401});\n      }\n      return true;\n    }\n\n    return super.requests();\n  };\n}\n"]}